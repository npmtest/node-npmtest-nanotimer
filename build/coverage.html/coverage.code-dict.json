{"/home/travis/build/npmtest/node-npmtest-nanotimer/test.js":"/* istanbul instrument in package npmtest_nanotimer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nanotimer/lib.npmtest_nanotimer.js":"/* istanbul instrument in package npmtest_nanotimer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nanotimer = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nanotimer = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nanotimer/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nanotimer && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nanotimer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nanotimer\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nanotimer.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nanotimer.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nanotimer.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nanotimer.__dirname + '/lib.npmtest_nanotimer.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nanotimer/node_modules/nanotimer/lib/nanotimer.js":"function NanoTimer(log){\n\n\tvar version = process.version;\n\tvar major = version.split('.')[0];\n\tmajor = major.split('v')[1];\n\tvar minor = version.split('.')[1];\n\n\tif ((major == 0) && (minor < 10)){\n\t\tconsole.log('Error: Please update to the latest version of node! This library requires 0.10.x or later');\n\t\tprocess.exit(0);\n\t}\n\n\t//Time reference variables\n\tthis.intervalT1 = null;\n\tthis.timeOutT1 = null;\n\tthis.intervalCount = 1;\n\n\t//Deferred reference indicator variables.  Indicate whether the timer used/will use the deferred call. ie - delay/interval > 25ms\n\tthis.deferredInterval = false;\n\tthis.deferredTimeout = false;\n\n\t//Deferred reference variables.  Used to clear the native js timeOut calls\n\tthis.deferredTimeoutRef = null;\n\tthis.deferredIntervalRef = null;\n\n\t//Callback reference variables.  Used to be able to still successfully call callbacks when timeouts or intervals are cleared.\n\tthis.timeoutCallbackRef = null;\n\tthis.intervalCallbackRef = null;\n\n\t//Immediate reference variables. Used to clear functions scheduled with setImmediate from running in the event timeout/interval is cleared.\n\tthis.timeoutImmediateRef = null;\n\tthis.intervalImmediateRef = null;\n\n\tthis.intervalErrorChecked = false;\n\n\tthis.intervalType = \"\";\n\n\tthis.timeoutTriggered = false;\n\n\tif(log){\n\t\tthis.logging = true;\n\t}\n}\n\nNanoTimer.prototype.time = function(task, args, format, callback){\n\t//Asynchronous task\n\tif(callback){\n\t\tvar t1 = process.hrtime();\n\n\n\t\tif(args){\n\n\t\t\targs.push(function(){\n\t\t\t\tvar time = process.hrtime(t1);\n\t\t\t\tif(format == 's'){\n\t\t\t\t\tcallback(time[0] + time[1]/1000000000);\n\t\t\t\t} else if (format == 'm'){\n\t\t\t\t\tcallback(time[0]*1000 + time[1]/1000000);\n\t\t\t\t} else if (format == 'u'){\n\t\t\t\t\tcallback(time[0]*1000000 + time[1]/1000);\n\t\t\t\t} else if (format == 'n'){\n\t\t\t\t\tcallback(time[0]*1000000000 + time[1]);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(time);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttask.apply(null, args);\n\t\t} else {\n\t\t\ttask(function(){\n\t\t\t\tvar time = process.hrtime(t1);\n\t\t\t\tif(format == 's'){\n\t\t\t\t\tcallback(time[0] + time[1]/1000000000);\n\t\t\t\t} else if (format == 'm'){\n\t\t\t\t\tcallback(time[0]*1000 + time[1]/1000000);\n\t\t\t\t} else if (format == 'u'){\n\t\t\t\t\tcallback(time[0]*1000000 + time[1]/1000);\n\t\t\t\t} else if (format == 'n'){\n\t\t\t\t\tcallback(time[0]*1000000000 + time[1]);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(time);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t//Synchronous task\n\t} else {\n\t\tvar t1 = process.hrtime();\n\n\t\tif(args){\n\t\t\ttask.apply(null, args);\n\t\t} else{\n\t\t\ttask();\n\t\t}\n\n\t\tvar t2 = process.hrtime(t1);\n\n\t\tif(format == 's'){\n\t\t\treturn t2[0] + t2[1]/1000000000;\n\t\t} else if (format == 'm'){\n\t\t\treturn t2[0]*1000 + t2[1]/1000000;\n\t\t} else if (format == 'u'){\n\t\t\treturn t2[0]*1000000 + t2[1]/1000;\n\t\t} else if (format == 'n'){\n\t\t\treturn t2[0]*1000000000 + t2[1];\n\t\t} else {\n\t\t\treturn process.hrtime(t1);\n\t\t}\n\t}\n};\n\nNanoTimer.prototype.setInterval = function(task, args, interval, callback){\n\n\tif(!this.intervalErrorChecked){\n\t\t//Task error handling\n\t\tif(!task){\n\t\t\tconsole.log(\"A task function must be specified to setInterval\");\n\t\t\tprocess.exit(1);\n\t\t} else {\n\t\t\tif(typeof(task) != \"function\"){\n\t\t\t\tconsole.log(\"Task argument to setInterval must be a function reference\");\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\t\t}\n\n\t\t//Interval error handling\n\t\tif(!interval){\n\t\t\tconsole.log(\"An interval argument must be specified\");\n\t\t\tprocess.exit(1);\n\t\t} else {\n\t\t\tif(typeof(interval) != \"string\"){\n\t\t\t\tconsole.log(\"Interval argument to setInterval must be a string specified as an integer followed by 's' for seconds, 'm' for milli, 'u' for micro, and 'n' for nanoseconds. Ex. 2u\");\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\t\t}\n\n\t\t//This ref is used if deferred timeout is cleared, so the callback can still be accessed\n\t\tif(callback){\n\t\t\tif(typeof(callback) != \"function\"){\n\t\t\t\tconsole.log(\"Callback argument to setInterval must be a function reference\");\n\t\t\t\tprocess.exit(1);\n\t\t\t} else {\n\t\t\t\tthis.intervalCallbackRef = callback;\n\t\t\t}\n\t\t}\n\n\t\tthis.intervalType = interval[interval.length-1];\n\n\t\tif(this.intervalType == 's'){\n\t\t\tthis.intervalTime = interval.slice(0, interval.length-1) * 1000000000;\n\t\t} else if(this.intervalType == 'm'){\n\t\t\tthis.intervalTime = interval.slice(0, interval.length-1) * 1000000;\n\t\t} else if(this.intervalType == 'u'){\n\t\t\tthis.intervalTime = interval.slice(0, interval.length-1) * 1000;\n\t\t} else if(this.intervalType == 'n'){\n\t\t\tthis.intervalTime = interval.slice(0, interval.length-1);\n\t\t} else {\n\t\t\tconsole.log('Error with argument: ' + interval + ': Incorrect interval format. Format is an integer followed by \"s\" for seconds, \"m\" for milli, \"u\" for micro, and \"n\" for nanoseconds. Ex. 2u');\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tthis.intervalErrorChecked = true;\n\t}\n\n\n\n\t//Avoid dereferencing inside of function objects later\n\t//Must be performed on every execution \n\tvar thisTimer = this;\n\n\tif(this.intervalTime > 0){\n\n\t\t//Check and set constant t1 value.\n\t\tif(this.intervalT1 == null){\n\t\t\tthis.intervalT1 = process.hrtime();\n\t\t}\n\n\t\t//Check for overflow.  Every 8,000,000 seconds (92.6 days), this will overflow\n\t\t//and the reference time T1 will be re-acquired.  This is the only case in which error will \n\t\t//propagate.\n\t\tif(this.intervalTime*this.intervalCount > 8000000000000000){\n\t\t\tthis.intervalT1 = process.hrtime();\n\t\t\tthis.intervalCount = 1;\n\t\t}\n\n\n\t\t//Get comparison time\n\t\tthis.difArray = process.hrtime(this.intervalT1);\n\t\tthis.difTime = (this.difArray[0] * 1000000000) + this.difArray[1];\n\n\t\t//If updated time < expected time, continue\n\t\t//Otherwise, run task and update counter\n\t\tif(this.difTime < (this.intervalTime*this.intervalCount)){\n\n\t\t\t//Can potentially defer to less accurate setTimeout if intervaltime > 25ms\n\t\t\tif(this.intervalTime > 25000000){\n\t\t\t\tif(this.deferredInterval == false){\n\t\t\t\t\tthis.deferredInterval = true;\n\t\t\t\t\tvar msDelay = (this.intervalTime - 25000000) / 1000000.0;\n\t\t\t\t\tthis.deferredIntervalRef = setTimeout(function(){thisTimer.setInterval(task, args, interval, callback);}, msDelay);\n\t\t\t\t} else {\n\t\t\t\t\tthis.deferredIntervalRef = null;\n\t\t\t\t\tthis.intervalImmediateRef = setImmediate(function(){thisTimer.setInterval(task, args, interval, callback);});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.intervalImmediateRef = setImmediate(function(){thisTimer.setInterval(task, args, interval, callback);});\n\t\t\t}\n\t\t} else {\n\n\t\t\tthis.intervalImmediateRef = null;\n\n\t\t\tif(this.logging){\n\t\t\t\tconsole.log('nanotimer log: ' + 'cycle time at - ' + this.difTime);\n\t\t\t}\n\n\n\t\t\tif(args){\n\t\t\t\ttask.apply(null, args);\n\t\t\t} else {\n\t\t\t\ttask();\n\t\t\t}\n\n\t\t\t//Check if the intervalT1 is still not NULL. If it is, that means the task cleared the interval so it should not run again.\n\t\t\tif(this.intervalT1){\n\t\t\t\tthis.intervalCount++;\n\t\t\t\tthis.deferredInterval = false;\n\t\t\t\tthis.intervalImmediateRef = setImmediate(function(){thisTimer.setInterval(task, args, interval, callback);});\n\t\t\t}\n\t\t}\n\n\t//If interval = 0, run as fast as possible.\n\t} else {\n\n\t\t//Check and set constant t1 value.\n\t\tif(this.intervalT1 == null){\n\t\t\tthis.intervalT1 = process.hrtime();\n\t\t}\n\n\t\tif(args){\n\t\t\ttask.apply(null, args);\n\t\t} else {\n\t\t\ttask();\n\t\t}\n\n\t\t// This needs to be re-checked here incase calling task turned this off\n\t\tif(this.intervalT1){\n\t\t\tthis.intervalImmediateRef = setImmediate(function(){thisTimer.setInterval(task, args, interval, callback);});\n\t\t}\n\t}\n};\n\nNanoTimer.prototype.setTimeout = function(task, args, delay, callback){\n\n\t//Task error handling\n\tif(!task){\n\t\tconsole.log(\"A task function must be specified to setTimeout\");\n\t\tprocess.exit(1);\n\t} else {\n\t\tif(typeof(task) != \"function\"){\n\t\t\tconsole.log(\"Task argument to setTimeout must be a function reference\");\n\t\t\tprocess.exit(1);\n\t\t}\n\t}\n\n\t//Delay error handling\n\tif(!delay){\n\t\tconsole.log(\"A delay argument must be specified\");\n\t\tprocess.exit(1);\n\t} else {\n\t\tif(typeof(delay) != \"string\"){\n\t\t\tconsole.log(\"Delay argument to setTimeout must be a string specified as an integer followed by 's' for seconds, 'm' for milli, 'u' for micro, and 'n' for nanoseconds. Ex. 2u\");\n\t\t\tprocess.exit(1);\n\t\t}\n\t}\n\n\t//This ref is used if deferred timeout is cleared, so the callback can still be accessed\n\tif(callback){\n\t\tif(typeof(callback) != \"function\"){\n\t\t\tconsole.log(\"Callback argument to setTimeout must be a function reference\");\n\t\t\tprocess.exit(1);\n\t\t} else {\n\t\t\tthis.timeoutCallbackRef = callback;\n\t\t}\n\t}\n\n\t//Avoid dereferencing\n\tvar thisTimer = this;\n\n\tif(this.timeoutTriggered){\n\t\tthis.timeoutTriggered = false;\n\t}\n\n\tvar delayType = delay[delay.length-1];\n\n\tif(delayType == 's'){\n\t\tvar delayTime = delay.slice(0, delay.length-1) * 1000000000;\n\t} else if(delayType == 'm'){\n\t\tvar delayTime = delay.slice(0, delay.length-1) * 1000000;\n\t} else if(delayType == 'u'){\n\t\tvar delayTime = delay.slice(0, delay.length-1) * 1000;\n\t} else if(delayType == 'n'){\n\t\tvar delayTime = delay.slice(0, delay.length-1);\n\t} else {\n\t\tconsole.log('Error with argument: ' + delay + ': Incorrect delay format. Format is an integer followed by \"s\" for seconds, \"m\" for milli, \"u\" for micro, and \"n\" for nanoseconds. Ex. 2u');\n\t\tprocess.exit(1);\n\t}\n\n\t//Set marker\n\tif(this.timeOutT1 == null){\n\t\tthis.timeOutT1 = process.hrtime();\n\t}\n\n\n\tvar difArray = process.hrtime(this.timeOutT1);\n\tvar difTime = (difArray[0] * 1000000000) + difArray[1];\n\n\n\tif(difTime < delayTime){\n\t\t//Can potentially defer to less accurate setTimeout if delayTime > 25ms\n\t\tif(delayTime > 25000000){\n\t\t\tif(this.deferredTimeout == false){\n\t\t\t\tthis.deferredTimeout = true;\n\t\t\t\tvar msDelay = (delayTime - 25000000) / 1000000.0;\n\t\t\t\tthis.deferredTimeoutRef = setTimeout(function(){thisTimer.setTimeout(task, args, delay, callback);}, msDelay);\n\t\t\t} else {\n\t\t\t\tthis.deferredTimeoutRef = null;\n\t\t\t\tthis.timeoutImmediateRef = setImmediate(function(){thisTimer.setTimeout(task, args, delay, callback);});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.timeoutImmediateRef = setImmediate(function(){thisTimer.setTimeout(task, args, delay, callback);});\n\t\t}\n\t} else {\n\t\tthis.timeoutTriggered = true;\n\t\tthis.timeoutImmediateRef = null;\n\t\tthis.timeOutT1 = null;\n\t\tthis.deferredTimeout = false;\n\n\t\tif(this.logging == true){\n\t\t\tconsole.log('nanotimer log: ' + 'actual wait - ' + difTime);\n\t\t}\n\n\t\tif(args){\n\t\t\ttask.apply(null, args);\n\t\t} else{\n\t\t\ttask();\n\t\t}\n\n\t\tif(callback){\n\t\t\tvar data = {'waitTime':difTime};\n\t\t\tcallback(data);\n\t\t}\n\n\t}\n};\n\nNanoTimer.prototype.clearInterval = function(){\n\n\n\tif(this.deferredIntervalRef){\n\t\tclearTimeout(this.deferredIntervalRef);\n\n\t\tthis.deferredInterval = false;\n\t}\n\n\tif(this.intervalImmediateRef){\n\t\tclearImmediate(this.intervalImmediateRef);\n\t}\n\n\tthis.intervalT1 = null;\n\tthis.intervalCount = 1;\n\tthis.intervalErrorChecked = false;\n\n\n\tif(this.intervalCallbackRef){\n\t\tthis.intervalCallbackRef();\n\t}\n\n};\n\nNanoTimer.prototype.clearTimeout = function(){\n\n\t// Only do something if this is not being called as a result\n\t// of the timeout triggering\n\tif(this.timeoutTriggered == false){\n\t\tif(this.deferredTimeoutRef){\n\t\t\tclearTimeout(this.deferredTimeoutRef);\n\n\t\t\tif(this.timeOutT1) {\n\t\t\t\tvar difArray = process.hrtime(this.timeOutT1);\n\t\t\t\tvar difTime = (difArray[0] * 1000000000) + difArray[1];\n\t\t\t}\n\n\t\t\tthis.deferredTimeout = false;\n\t\t}\n\n\t\tif(this.timeoutImmediateRef){\n\t\t\tclearImmediate(this.timeoutImmediateRef);\n\t\t}\n\n\t\tthis.timeOutT1 = null;\n\n\t\tif(this.timeoutCallbackRef){\n\t\t\tvar data = {'waitTime':difTime};\n\t\t\tthis.timeoutCallbackRef(data);\n\t\t}\n\t}\n};\n\nmodule.exports = NanoTimer;\n"}